'use strict';

// ЗАПУСКАТЬ НА СЕРВЕРЕ !!!!!!!!!!!! 


// AJAX ( Asynchronous Javascript and XML — «асинхронный JavaScript и XML») асинхронное выполнение задач на странице и общение с сервером

// 1. Красивая интерактивная обработка любых событий. Например фильтры в интернет магазине.
// 2. Ускорение реакции интерфейса. Мы не полностью обновляем страницу, а лишь заменяем часть контента
// 3. Уменьшаем нагрузку на сервер и экономим трафик пользователя. 

// Минусы. 

// При асинхронном выполнении задач, если у пользователя плохой интернет, то JS на странице может отработать не правильно.





// реализуем калькулятор валют, в который данные будут приходить от сервера

// старый метод!!!

// У нас в проекте есть файл current.json. В нем есть объект, в котором есть вложенный объект current со свойством usd


const inputRub = document.querySelector('#rub'),
      inputUsd = document.querySelector('#usd');

// событие change возникает тогда, когда наш imput выходит из фокуса
// событие input возникает тогда, когда что-либо вводится или удаляется из input

inputRub.addEventListener('input', () => {
    const request = new XMLHttpRequest(); // создаем экземпляр класса XMLHtpp. У него есть свои свойства, свои методы и события.  

    // request.open(method, url, async, login, password); этот МЕТОД собирает настройки, которые в будущем будут использоваться при запросе. 
    //                 1 аргумент - метод(get (получить данные от сервера),post(отправить) и т.д.).2 - путь к серверу(или файл). 3 - синхронность или асинхронность
    // Синхронные - если операция долго выполняется, то последующий код будет ждать её окончания. Асинхронные будет выполняться параллельно. По дефолту AJAX - асинхронный
    // сделать синхронным, тогда пока не будет получен ответ от сервера, то дальнейший код работать не будет. ПОЧТИ НИКОГДА НЕ НУЖНО
    // 4 - login. 5 - password . Т.е некоторые запросы мы можем делать только тогда, когда мы имеем логин и пароль. 

    request.open('GET', 'js/current.json'); // 1.метод записывается в ферхнем регистре! 2. Путь указывается относительно index.html
    request.setRequestHeader('Content-type', 'applicarion/json; charset=utf-8');//передаём заголов для JSON файлов. Указать в чем закодирована (JSON файл, изображения...)
    request.send(); // отправляем наш сформированный запрос


    // СВОЙСТВА у нашего нового экземпляра класса XML:
    // status - код запроса ( 404 - not found, 0, 200 - успех, 403 т.д.);
    // statusText - Текс, который приписывается к коду. Ok, not Found и т.д 
    // response - ответ, который приходит от сервера. Ответ от бэкенд разработчика.

    // readyState - Текущее состояние объекта:
    //              0 - Unsent              объект создан, метод send не вызывался
    //              1 - Opened              Метод open() вызван
    //              2 - Headers-Recived    Метод send() вызван, доступны заголовки и статус
    //              3 - Loading             Загрузка. responseText содержит частичные данные
    //              4 - Send                Операция полностью завершена
    //
    // СОБЫТИЯ..  readystatechange и load.  load срабатывает когда наше событие загрузилось и мы получили результат (тоесть 1 раз)

    // readystatechange используется редко.

    // request.addEventListener("readystatechange", () => { // собитие отслеживает готовность запроса в текущий момент (отслеживает readyState. C 0 и до 4)
    //     if (request.status === 200 && request.readyState === 4) { // если статус запроса получен 200 ( ok ) и готовность объекта - 4 ( send ), то
    //         console.log(request.response);
    //         const data = JSON.parse(request.response); // распарсиваем ответ от сервера в JSON формат и присваем это значение переменной data
    //         inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2);//результат деления введеных рублей на курс валюты. toFixed(2)-символов после точки
    //     } else { // если что-то сломалось ОБЯЗАТЕЛЬНО оповещаем пользователя
    //         inputUsd.value = 'Что-то пошло не так';
    //     }
        
    //     if ( isNaN(inputRub.value) ) {  // если пользователь указывает не число!
    //         inputUsd.value = 'Укажите число!';
    //     }
    // });

    // чаще load

        request.addEventListener("load", () => { 
        if (request.status === 200) { // не отслеживает readyState
            const data = JSON.parse(request.response);
            inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2);
        } else { 
            inputUsd.value = 'Что-то пошло не так';
        }
        
        if ( isNaN(inputRub.value) ) {
            inputUsd.value = 'Укажите число!';
        }
    });
});